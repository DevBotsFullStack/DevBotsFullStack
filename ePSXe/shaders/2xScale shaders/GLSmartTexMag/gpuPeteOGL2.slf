/*
   The GLSmartTexMag filter shader
   
   Copyright (C) 2009 guest(r) - guest.r@gmail.com


   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.


   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.


   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


*/




uniform sampler2D OGL2Texture;


float hd(float x)
{ 
  float y = x*1.1547-1.0;
  float z = x*0.8660254;
  y = (sin(y*1.5707)+1.0)*0.866025;
  return ((1.0-z)*x+z*y);
}


void main()
{
    vec3 c11 = texture2D(OGL2Texture, gl_TexCoord[0].xy).xyz;
    vec3 s00 = texture2D(OGL2Texture, gl_TexCoord[1].xy).xyz; 
    vec3 s20 = texture2D(OGL2Texture, gl_TexCoord[2].xy).xyz; 
    vec3 s22 = texture2D(OGL2Texture, gl_TexCoord[3].xy).xyz; 
    vec3 s02 = texture2D(OGL2Texture, gl_TexCoord[4].xy).xyz; 
    vec3 c00 = texture2D(OGL2Texture, gl_TexCoord[5].xy).xyz; 
    vec3 c22 = texture2D(OGL2Texture, gl_TexCoord[6].xy).xyz; 
    vec3 c20 = texture2D(OGL2Texture, gl_TexCoord[5].zw).xyz;
    vec3 c02 = texture2D(OGL2Texture, gl_TexCoord[6].zw).xyz;
    vec3 c01 = texture2D(OGL2Texture, gl_TexCoord[1].zw).xyz; 
    vec3 c21 = texture2D(OGL2Texture, gl_TexCoord[2].zw).xyz; 
    vec3 c10 = texture2D(OGL2Texture, gl_TexCoord[3].zw).xyz; 
    vec3 c12 = texture2D(OGL2Texture, gl_TexCoord[4].zw).xyz;  
    vec3 dt = vec3(1.0,1.0,1.0);


    float d1=dot(abs(c00-c22),dt)+0.001;
    float d2=dot(abs(c20-c02),dt)+0.001;
    float hl=dot(abs(c01-c21),dt)+0.001;
    float vl=dot(abs(c10-c12),dt)+0.001;
    float m1=dot(abs(s00-s22),dt)+0.001;
    float m2=dot(abs(s02-s20),dt)+0.001;


    vec3 t1=(hl*(c10+c12)+vl*(c01+c21)+(hl+vl)*c11)/(3.0*(hl+vl));
    vec3 t2=(d1*(c20+c02)+d2*(c00+c22)+(d1+d2)*c11)/(3.0*(d1+d2));
    
    c11 =.25*(t1+t2+(m2*(s00+s22)+m1*(s02+s20))/(m1+m2));


    vec3 mn1 = min(min(c00,c01),c02);
    vec3 mn2 = min(min(c10,c11),c12);
    vec3 mn3 = min(min(c20,c21),c22);


    vec3 mx1 = max(max(c00,c01),c02);
    vec3 mx2 = max(max(c10,c11),c12);
    vec3 mx3 = max(max(c20,c21),c22);


    mn1 = min(min(mn1,mn2),mn3);
    mx1 = max(max(mx1,mx2),mx3);


    float filterparam = 3.0; 
    // float filterparam = 2.0*length(mn1-mx1) + 0.75; 
      // float filterparam = length(mx1-mn1) + dot(mx1-mn1,mx1-mn1) + dot(abs(mx1-mn1),vec3(2.0)) + 0.5;


    vec3 dif1 = abs(c11-mn1) + 0.001*dt;
    vec3 dif2 = abs(c11-mx1) + 0.001*dt;


    dif1=vec3(pow(dif1.x,filterparam),pow(dif1.y,filterparam),pow(dif1.z,filterparam));
    dif2=vec3(pow(dif2.x,filterparam),pow(dif2.y,filterparam),pow(dif2.z,filterparam));


    c11.r = (dif1.x*mx1.x + dif2.x*mn1.x)/(dif1.x + dif2.x);
    c11.g = (dif1.y*mx1.y + dif2.y*mn1.y)/(dif1.y + dif2.y);
    c11.b = (dif1.z*mx1.z + dif2.z*mn1.z)/(dif1.z + dif2.z);


    d1 = length(c11);
    c11= vec3(pow(c11,vec3(1.2)));


        gl_FragColor.xyz=hd(d1)*normalize(c11);
}
