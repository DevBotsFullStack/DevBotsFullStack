/*
   The GLSoft Smart GLSL shader 2.0

 
   Copyright (C) 2010 guest(r) - guest.r@gmail.com

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
 
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/

uniform sampler2D OGL2Texture;

uniform vec4 OGL2Param;

float hd(float x)
{ 
  float y = x*1.1547-1.0;
  float z = x*0.8660254;
  y = (sin(y*1.5707)+1.0)*0.866025;
  return (OGL2Param.z*(((1.0-z)*x+z*y))+x)/(OGL2Param.z+1.0);
}


void main()
{
    vec3 dt=vec3(1.0,1.0,1.0);
    vec3 u,d,r,l; float m1,m2;
    vec3 c00,c02,c20,c22,c11;	
 
    vec3 c10 = texture2D(OGL2Texture, gl_TexCoord[1].xy).xyz;
    vec3 c12 = texture2D(OGL2Texture, gl_TexCoord[1].xz).xyz;
    vec3 c14 = texture2D(OGL2Texture, gl_TexCoord[1].xw).xyz;
    vec3 c30 = texture2D(OGL2Texture, gl_TexCoord[2].xy).xyz;
    vec3 c32 = texture2D(OGL2Texture, gl_TexCoord[2].xz).xyz;
    vec3 c34 = texture2D(OGL2Texture, gl_TexCoord[2].xw).xyz;
    vec3 c01 = texture2D(OGL2Texture, gl_TexCoord[3].yx).xyz;
    vec3 c21 = texture2D(OGL2Texture, gl_TexCoord[3].zx).xyz;
    vec3 c41 = texture2D(OGL2Texture, gl_TexCoord[3].wx).xyz;
    vec3 c03 = texture2D(OGL2Texture, gl_TexCoord[4].yx).xyz;
    vec3 c23 = texture2D(OGL2Texture, gl_TexCoord[4].zx).xyz;
    vec3 c43 = texture2D(OGL2Texture, gl_TexCoord[4].wx).xyz;

    m1=dot(abs(c10-c32),dt)+0.001;
    m2=dot(abs(c30-c12),dt)+0.001;
    u=(m2*(c10+c32)+m1*(c30+c12))/(m1+m2);
 
    m1=dot(abs(c14-c32),dt)+0.001;
    m2=dot(abs(c34-c12),dt)+0.001;
    d=(m2*(c14+c32)+m1*(c34+c12))/(m1+m2);
 
    m1=dot(abs(c01-c23),dt)+0.001;
    m2=dot(abs(c21-c03),dt)+0.001;
    l=(m2*(c01+c23)+m1*(c21+c03))/(m1+m2);

    m1=dot(abs(c21-c43),dt)+0.001;
    m2=dot(abs(c41-c23),dt)+0.001;
    r=(m2*(c21+c43)+m1*(c41+c23))/(m1+m2);
 
    vec3 d11 = 0.125*(u+d+r+l);
 
    vec2 inv_size = vec2(0.00048828125, 0.0009765625)*(3.0/4.0);

    vec2 dx  = vec2(inv_size.x,0.0);
    vec2 dy  = vec2(0.0,inv_size.y);
    vec2 g1  = vec2( inv_size.x,inv_size.y);
    vec2 g2  = vec2(-inv_size.x,inv_size.y);
    vec2 pC4 = gl_TexCoord[0].xy;
 
    // Reading the texels
 
    c00 = texture2D(OGL2Texture,pC4-g1).xyz; 
    c10 = texture2D(OGL2Texture,pC4-dy).xyz;
    c20 = texture2D(OGL2Texture,pC4-g2).xyz;
    c01 = texture2D(OGL2Texture,pC4-dx).xyz;
    c11 = texture2D(OGL2Texture,pC4   ).xyz;
    c21 = texture2D(OGL2Texture,pC4+dx).xyz;
    c02 = texture2D(OGL2Texture,pC4+g2).xyz;
    c12 = texture2D(OGL2Texture,pC4+dy).xyz;
    c22 = texture2D(OGL2Texture,pC4+g1).xyz;
 
    float d1=dot(abs(c00-c22),dt)+0.001;
    float d2=dot(abs(c20-c02),dt)+0.001;
    float hl=dot(abs(c01-c21),dt)+0.001;
    float vl=dot(abs(c10-c12),dt)+0.001;

    vec3 mn1 = min(min(c00,c01),c02);
    vec3 mn2 = min(min(c10,c11),c12);
    vec3 mn3 = min(min(c20,c21),c22);

    vec3 mx1 = max(max(c00,c01),c02);
    vec3 mx2 = max(max(c10,c11),c12);
    vec3 mx3 = max(max(c20,c21),c22);

    mn1 = min(min(mn1,mn2),mn3);
    mx1 = max(max(mx1,mx2),mx3);

    float filterparam = 4.0; 

    vec3 dif1 = abs(d11-mn1) + 0.001*dt;
    vec3 dif2 = abs(d11-mx1) + 0.001*dt;

    dif1=vec3(pow(dif1.x,filterparam),pow(dif1.y,filterparam),pow(dif1.z,filterparam));
    dif2=vec3(pow(dif2.x,filterparam),pow(dif2.y,filterparam),pow(dif2.z,filterparam));

    d11.r = (dif1.x*mx1.x + dif2.x*mn1.x)/(dif1.x + dif2.x);
    d11.g = (dif1.y*mx1.y + dif2.y*mn1.y)/(dif1.y + dif2.y);
    d11.b = (dif1.z*mx1.z + dif2.z*mn1.z)/(dif1.z + dif2.z);

    float k1=hl+vl;
    float k2=d1+d2;
	
    vec3 t1=(hl*(c10+c12)+vl*(c01+c21)+0.0*k1*c11)/(2.0*(hl+vl));
    vec3 t2=(d1*(c20+c02)+d2*(c00+c22)+0.0*k2*c11)/(2.0*(d1+d2));

    k1=dot(abs(t1-d11),dt)+0.001;
    k2=dot(abs(t2-d11),dt)+0.001;

    c11 = (k1*t2 + k2*t1)/(k1+k2);


    filterparam = 1.1; 

    dif1 = abs(c11-mn1) + 0.001*dt;
    dif2 = abs(c11-mx1) + 0.001*dt;

    dif1=vec3(pow(dif1.x,filterparam),pow(dif1.y,filterparam),pow(dif1.z,filterparam));
    dif2=vec3(pow(dif2.x,filterparam),pow(dif2.y,filterparam),pow(dif2.z,filterparam));

    c11.r = (dif1.x*mx1.x + dif2.x*mn1.x)/(dif1.x + dif2.x);
    c11.g = (dif1.y*mx1.y + dif2.y*mn1.y)/(dif1.y + dif2.y);
    c11.b = (dif1.z*mx1.z + dif2.z*mn1.z)/(dif1.z + dif2.z);

    d1 = length(c11);
    c11= vec3(pow(c11,vec3(1.2)));

    gl_FragColor.xyz=hd(d1)*normalize(c11);
}